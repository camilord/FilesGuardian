<?php
/**
 * AlphaOne Building Consent System
 * Copyright 2021
 * Generated in PhpStorm.
 * Developer: Camilo Lozano III - www.camilord.com
 *                              - github.com/camilord
 *                              - linkedin.com/in/camilord
 *
 * spamify - SpamifyDataMinerCommand.php
 * Username: Camilo
 * Date: 24/02/2021
 * Time: 9:00 PM
 */

namespace App\Console\Command;

use App\Common\Constants;
use App\Config\ExclusionConfig;
use App\Config\ExtConfig;
use App\Console\BaseCommand;
use App\Core\LockVault;
use App\Mail\Mailer;
use App\Misc\RubbishDefaultDictionary;
use camilord\utilus\Data\ArrayUtilus;
use camilord\utilus\IO\SystemUtilus;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Class ScanFilesCommand
 * @package App\Console\Command
 */
class ScanFilesCommand extends BaseCommand
{
    // the name of the command (the part after "bin/console")
    protected static $defaultName = 'guardian:execute';

    private $mode;
    private $path;
    private $action;

    private $default_dictionaries = [];

    private $exclusion_dir = [];
    private $exclusion_files = [];
    /**
     * @var LockVault
     */
    private $lock_vault;

    /**
     * @var array
     */
    private $collected_rubbish_files = [];
    private $collected_rubbish_dir = [];

    /**
     * configure command
     *
     * lock - scan all the files on that specific directory and lock it.
     *        meaning when you set you to run the --mode=guard then if
     *        there are files not belong in that directory, it will be deleted and
     *        send you a notification
     *
     * guard - that's the mode you set on your cron to guard your files
     *
     */
    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub

        $this
            ->addOption('mode', null, InputOption::VALUE_REQUIRED, 'Execution mode whether to lock, scan or guard the files. Mode values: lock|scan|guard|reset')
            ->addOption('action', null, InputOption::VALUE_OPTIONAL, 'When guard mode, what do you want with the malicious files/folders? Delete and Notify (delete) or Notify only (notify)? By default: delete , Values: delete|notify')
            // configure an argument
            ->addArgument('path', InputArgument::REQUIRED, 'Path or directory to execute with')
            // ...
        ;

        $obj = new RubbishDefaultDictionary();
        $this->default_dictionaries = $obj->get_list();
        unset($obj);
    }

    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     * @return int
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        // this method must return an integer number with the "exit status code"
        // of the command. You can also use these constants to make code more readable
        $this->mode = $input->getOption('mode');
        $this->path = $input->getArgument('path');
        $this->action = $input->getOption('action') ?? Constants::GUARD_MODE_DELETE;

        if ($this->mode === Constants::EXECUTION_MODE_RESET) {
            $this->lock_vault = new LockVault($this->getDB());
            $this->lock_vault->clear_all();
            echo "\n\n>> RESET COMPLETED <<\n\n";
            return Command::SUCCESS;
        }

        if (is_dir($this->path) && !is_file($this->path)) {

            $exc = new ExclusionConfig();
            $this->exclusion_dir = $exc->get_dir_list();
            $this->exclusion_files = $exc->get_files_list();

            $this->lock_vault = new LockVault($this->getDB());

            $dir = $this->path;
            $this->scan_files($dir);

            if ($this->mode === Constants::EXECUTION_MODE_SCAN) {
                $this->executionScanMode();
            } else if ($this->mode === Constants::EXECUTION_MODE_LOCK) {
                echo "==========================================================================\n";
                echo ">>> SCAN COMPLETED AND FILE SYSTEM LOCKED! <<<\n";
            } else if ($this->mode === Constants::EXECUTION_MODE_GUARD) {
                echo "==========================================================================\n";
                if (ArrayUtilus::haveData($this->collected_rubbish_dir) || ArrayUtilus::haveData($this->collected_rubbish_files)) {
                    echo "Sending notification to admins ... ";
                    $result = $this->sendGuardNotification();
                    echo $result ? "\t -> SENT\n" : "\t -> ERR\n";
                    echo "\nMalicious files have been detected!\n";
                    echo "Malicious Directories: {$this->collected_rubbish_dir}\n";
                    echo "Malicious Files: {$this->collected_rubbish_files}\n";
                    echo "\n";
                } else {
                    echo "Yey! No malicious files have been detected.";
                }
            }

        } else {
            throw new \Exception("Error! Please provide a valid path to scan.");
        }

        // return this if there was no problem running the command
        // (it's equivalent to returning int(0))
        return Command::SUCCESS;

        // or return this if some error happened during the execution
        // (it's equivalent to returning int(1))
        // return Command::FAILURE;
    }

    /**
     * @param string $dir
     */
    private function scan_files(string $dir)
    {
        $files = scandir($dir);

        // if dir is gone, just don't continue
        if (!$files) {
            return;
        }

        foreach($files as $item) {

            if ($item === '.' || $item === '..') {
                continue;
            }

            $filename = $dir.'/'.$item;

            echo "Scanning rubbish: {$filename} ";

            if (is_dir($filename) && !in_array($filename, $this->exclusion_dir)) {
                echo ":\n\n";
                echo "\t == Scanning Sub-dir ==\n\n";
                $result = true;
                if ($this->mode === Constants::EXECUTION_MODE_LOCK || $this->mode === Constants::EXECUTION_MODE_GUARD) {
                    $result = $this->executionLockAndGuardMode($filename);
                }

                // scan sub-folders
                if ($result) {
                    $this->scan_files($filename);
                }
            } else if (
                is_file($filename) &&
                !in_array($filename, $this->exclusion_files) &&
                in_array(substr($filename, -3), ExtConfig::get_list())
            ) {
                if ($this->mode === Constants::EXECUTION_MODE_SCAN) {
                    if ($this->is_rubbish($filename)) {
                        $this->collected_rubbish_files[] = $filename;
                        echo "\t -> RUBBISH!!!";
                    } else {
                        echo "\t -> OK\n";
                    }
                } else if ($this->mode === Constants::EXECUTION_MODE_LOCK || $this->mode === Constants::EXECUTION_MODE_GUARD) {
                    $this->executionLockAndGuardMode($filename);
                } else {
                    echo "\t -> -?-\n";
                }
            } else if (in_array($filename, $this->exclusion_dir) || in_array($filename, $this->exclusion_files)) {
                echo "\t -> SKIPPED\n";
            } else {
                echo "\t -> OK\n";
            }
        }

        echo "\n\n";
    }

    /**
     * @param string $item
     * @return bool - whether you can recurse or not
     */
    private function executionLockAndGuardMode(string $item) {
        if (is_file($item) && file_exists($item)) {
            $md5_hash = md5_file($item);
            $item_data = $this->lock_vault->get_record($item);
            if (ArrayUtilus::haveData($item_data)) {
                if ($item_data['md5_hash'] === $md5_hash) {
                    echo ($this->mode === Constants::EXECUTION_MODE_GUARD) ? "\t -> OK\n" : "\t -> DONE\n";
                } else {
                    if ($this->mode === Constants::EXECUTION_MODE_GUARD) {
                        if ($this->action === Constants::GUARD_MODE_DELETE) {
                            echo unlink($item) ? "\t -> DELETED" : " -> ERR DEL\n";
                        } else {
                            $this->collected_rubbish_files[] = $item;
                            echo "\t -> TBD (To Be Deleted)";
                        }
                    } else {
                        echo "\t -> OK\n";
                    }
                }
            } else {
                if ($this->mode === Constants::EXECUTION_MODE_GUARD) {
                    if ($this->action === Constants::GUARD_MODE_DELETE) {
                        echo unlink($item) ? "\t -> DELETED" : " -> ERR DEL\n";
                    } else {
                        $this->collected_rubbish_files[] = $item;
                        echo "\t -> TBD (To Be Deleted)";
                    }
                    return false;
                } else {
                    $result = $this->lock_vault->add_file($md5_hash, $item);
                    echo ($result) ? "\t -> LOCKED\n" : "\t -> ERR\n";
                }
            }
        } else if (is_dir($item)) {
            echo "Locking folder: {$item} ";
            if (!$this->lock_vault->dir_exists($item)) {
                if ($this->mode === Constants::EXECUTION_MODE_GUARD) {
                    if ($this->action === Constants::GUARD_MODE_DELETE) {
                        $this->remove_dir($item);
                    } else {
                        $this->collected_rubbish_dir[] = $item;
                    }
                    echo "\t -> DIR DELETED\n";
                    return false;
                } else {
                    $result = $this->lock_vault->add_dir($item);
                    echo ($result) ? "\t -> LOCKED\n" : "\t -> ERR\n";
                }
            } else {
                echo ($this->mode === Constants::EXECUTION_MODE_GUARD) ? "\t -> OK\n" : "\t -> DONE\n";
            }
        } else {
            echo "\t -> OK?\n";
        }

        return true;
    }

    /**
     * @param string $dir
     */
    private function remove_dir(string $dir)
    {
        if (is_dir($dir))
        {
            $objects = scandir($dir);
            foreach ($objects as $object)
            {
                if ($object != "." && $object != "..")
                {
                    if (is_dir($dir. DIRECTORY_SEPARATOR .$object) && !is_link($dir."/".$object))
                        $this->remove_dir($dir. DIRECTORY_SEPARATOR .$object);
                    else
                        unlink($dir. DIRECTORY_SEPARATOR .$object);
                }
            }
            rmdir($dir);
        }
    }

    /**
     * scan mode
     */
    private function executionScanMode() {

        if (!ArrayUtilus::haveData($this->collected_rubbish_files)) {
            echo ">>> SCAN COMPLETED <<<\n";
            echo "Scan Result: No malicious file(s) found.\n\n";
            return;
        }

        echo "\n==================================================================\n\n";
        print_r($this->collected_rubbish_files);
        echo "\nAbove are the rubbish files!\n\n";


        $not_answered = true;
        while($not_answered)
        {
            echo "Do you want to delete these files? Type 'yes'\n";
            echo "Or if you want to delete manually and we will save the file as json, type 'manual'\n";
            echo "Or if you want to do nothing, type 'nil'\n";
            echo "Enter answer:   ";

            $handle = fopen ("php://stdin","r");
            $answer = trim(fgets($handle));
            echo "\n\n";

            if(in_array($answer, ['yes', 'manual', 'nil']))
            {
                if ($answer === 'yes') {
                    foreach($this->collected_rubbish_files as $rubbish_file) {
                        echo "Deleting {$rubbish_file} ...";
                        echo unlink($rubbish_file) ? "\t -> OK\n" : "\t -> FAIL\n";
                    }
                    echo "\nDeleted files: ".count($this->collected_rubbish_files)."\n\n";
                } else if ($answer === 'manual') {
                    echo "\nSaving file ... ";
                    $rubbish_filename = CONSOLE_ROOT.'/saved_files/rubbish_files_'.date("Ymd_His").'.json';
                    $rubbish_filename = SystemUtilus::cleanPath($rubbish_filename);
                    file_put_contents($rubbish_filename,
                        json_encode(
                            $this->collected_rubbish_files,
                            JSON_PRETTY_PRINT
                        )
                    );
                    echo "\t -> OK\n";
                    echo "Output File: {$rubbish_filename}\n\n";
                } else {
                    echo "\n\n----------\n\n";
                    echo "Scan completed.\n";
                }

                // let the loop its been answered.
                $not_answered = false;
            }

            unset($handle, $answer);
            echo "\n\n";
        }
    }

    /**
     * @param string $filename
     * @return bool
     */
    private function is_rubbish(string $filename)
    {
        if (!file_exists($filename)) {
            return false;
        }

        $content = file_get_contents($filename);
        foreach($this->default_dictionaries as $dict) {
            if (strpos($content, $dict['pattern']) !== false) {
                return true;
            }
        }

        return false;
    }

    /**
     * @return bool
     */
    private function sendGuardNotification() {
        $mailer = new Mailer();

        $recipients = json_decode(file_get_contents(CONSOLE_ROOT.'/admin.conf.json'), true);
        $subject = 'ALERT! '.gethostname().' have detected malicious files! #'.date('Ymd');
        $message = '<p>ATTENTION!</p>
                    <br />
                    <p>Malicious files and folders detected!</p>
                    <p><strong>Files:</strong><br /><pre>'.print_r($this->collected_rubbish_files).'</pre></p>
                    <p><strong>Folders:</strong><br /><pre>'.print_r($this->collected_rubbish_dir).'</pre></pre>
                    <br />
                    <p>-- FilesGuardian on '.gethostname().'</p>';
        return $mailer->send($recipients, $subject, $message);
    }
}